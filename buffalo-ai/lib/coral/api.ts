/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/debug/thread/{applicationId}/{privacyKey}/{coralSessionId}/{debugAgentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create thread
         * @description Creates a new thread
         */
        post: operations["debugCreateThread"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/debug/thread/sendMessage/{applicationId}/{privacyKey}/{coralSessionId}/{debugAgentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send message
         * @description Sends a message in debug mode
         */
        post: operations["debugSendMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sessions
         * @description Fetches all active session IDs
         */
        get: operations["getSessions"];
        put?: never;
        /**
         * Create session
         * @description Creates a new session
         */
        post: operations["createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/message/{applicationId}/{privacyKey}/{coralSessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send message
         * @description Sends a message
         */
        post: operations["sendMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/message/devmode/{applicationId}/{privacyKey}/{coralSessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send development message
         * @description Sends a dev-mode message
         */
        post: operations["sendDevMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/telemetry/{sessionId}/{threadId}/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get telemetry
         * @description Fetches telemetry information for a given message
         */
        get: operations["getTelemetry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/telemetry/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add telemetry
         * @description Attaches telemetry information a list of messages
         */
        post: operations["addTelemetry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available agents
         * @description Fetches a list of all agents available to the Coral server
         */
        get: operations["getAvailableAgents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/agents/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim agents
         * @description Creates a claim for agents that can later be instantiated via WebSocket
         */
        post: operations["claimAgents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/agents/exported/{name}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get exported agent info
         * @description Returns export information for a specific agent
         */
        get: operations["getExportedAgent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/internal/claim/{remoteSessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim payment
         * @description API endpoint for agents to claim payment for their work.  This is used by exported agents
         */
        post: operations["claimPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/wallet/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get public wallet address
         * @description Retrieves the wallet address that this server users. This might be separate from the configured keypair.
         */
        get: operations["getPublicWallet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** SocketEvent */
        SocketEvent: {
            /**
             * String
             * @enum {string}
             */
            type: "agent_list";
            /** ArrayList<SessionAgent> */
            sessionAgents: components["schemas"]["SessionAgent"][];
        } | {
            /**
             * String
             * @enum {string}
             */
            type: "debug_agent_registered";
            /** String */
            id: string;
        } | {
            /**
             * String
             * @enum {string}
             */
            type: "session";
            /** SessionEvent */
            event: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "agent_ready";
                /** String */
                agent: string;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "agent_registered";
                agent: components["schemas"]["SessionAgent"];
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "agent_state_updated";
                /** String */
                agentId: string;
                state: components["schemas"]["SessionAgentState"];
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "message_sent";
                /** String */
                threadId: string;
                message: components["schemas"]["ResolvedMessage"];
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "thread_created";
                /** String */
                id: string;
                /** String */
                name: string;
                /** String */
                creatorId: string;
                /** ArrayList<String> */
                participants: string[];
                /** String */
                summary?: string;
            };
        } | {
            /**
             * String
             * @enum {string}
             */
            type: "thread_list";
            /** ArrayList<ResolvedThread> */
            threads: components["schemas"]["ResolvedThread"][];
        };
        /** SessionAgent */
        SessionAgent: {
            /** String */
            id: string;
            /** String */
            description: string;
            state: components["schemas"]["SessionAgentState"];
            /** String */
            mcpUrl?: string;
            /** LinkedHashSet<CustomTool> */
            extraTools: components["schemas"]["CustomTool"][];
            /** LinkedHashSet<GraphAgentPlugin> */
            coralPlugins: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "close_session_tool";
            }[];
        };
        /**
         * SessionAgentState
         * @enum {string}
         */
        SessionAgentState: "disconnected" | "connecting" | "listening" | "busy" | "dead";
        /** CustomTool */
        CustomTool: {
            /** ToolTransport */
            transport: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "http";
                /** UriString */
                url: string;
            };
            toolSchema: components["schemas"]["Tool"];
        };
        /** Tool */
        Tool: {
            /** String */
            name: string;
            /** String */
            description?: string;
            inputSchema: components["schemas"]["Input"];
            outputSchema?: components["schemas"]["Output"];
            annotations?: components["schemas"]["ToolAnnotations"];
        };
        /** Input */
        Input: {
            /** JsonObject<String,JsonElement> */
            properties: {
                [key: string]: components["schemas"]["JsonElement"];
            };
            /** ArrayList<String> */
            required?: string[];
            /** String */
            type: string;
        };
        /** JsonElement */
        JsonElement: Record<string, never>;
        /** Output */
        Output: {
            /** JsonObject<String,JsonElement> */
            properties: {
                [key: string]: components["schemas"]["JsonElement"];
            };
            /** ArrayList<String> */
            required?: string[];
            /** String */
            type: string;
        };
        /** ToolAnnotations */
        ToolAnnotations: {
            /** String */
            title?: string;
            /** Boolean */
            readOnlyHint?: boolean;
            /** Boolean */
            destructiveHint?: boolean;
            /** Boolean */
            idempotentHint?: boolean;
            /** Boolean */
            openWorldHint?: boolean;
        };
        /** ResolvedMessage */
        ResolvedMessage: {
            /** String */
            id: string;
            /** String */
            threadName: string;
            /** String */
            threadId: string;
            /** String */
            senderId: string;
            /** String */
            content: string;
            /**
             * Long
             * Format: int64
             */
            timestamp: number;
            /** ArrayList<String> */
            mentions: string[];
        };
        /** ResolvedThread */
        ResolvedThread: {
            /** String */
            id: string;
            /** String */
            name: string;
            /** String */
            creatorId: string;
            /** ArrayList<String> */
            participants: string[];
            /** ArrayList<ResolvedMessage> */
            messages: components["schemas"]["ResolvedMessage"][];
            /** Boolean */
            isClosed: boolean;
            /** String */
            summary?: string;
        };
        /**
         * McpToolName
         * @enum {string}
         */
        McpToolName: "coral_add_participant" | "coral_close_thread" | "coral_create_thread" | "coral_list_agents" | "coral_remove_participant" | "coral_send_message" | "coral_wait_for_mentions" | "coral_close_session";
        /**
         * McpResources
         * @enum {string}
         */
        McpResources: "Message.resource" | "Instruction.resource" | "Agent.resource";
        /** McpToolResult */
        McpToolResult: {
            /**
             * String
             * @enum {string}
             */
            result: "add_participant_success";
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "agent_list_success_with_details";
            /** ArrayList<SessionAgent> */
            agents: components["schemas"]["SessionAgent"][];
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "agent_list_success";
            /** ArrayList<String> */
            agents: string[];
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "close_session_success";
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "close_thread_success";
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "create_thread_success";
            thread: components["schemas"]["ResolvedThread"];
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "error";
            /** String */
            message: string;
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "remove_participant_success";
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "send_message_success";
            message: components["schemas"]["ResolvedMessage"];
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "tool_input_error";
            /** String */
            message: string;
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "wait_for_mentions_success";
            /** ArrayList<ResolvedMessage> */
            messages: components["schemas"]["ResolvedMessage"][];
        } | {
            /**
             * String
             * @enum {string}
             */
            result: "error_timeout";
        };
        /** CreateThreadInput */
        CreateThreadInput: {
            /** String */
            threadName: string;
            /** ArrayList<String> */
            participantIds: string[];
        };
        /** RouteException */
        RouteException: {
            /** String */
            message?: string;
            /** ArrayList<String> */
            stackTrace: string[];
        };
        /** SendMessageInput */
        SendMessageInput: {
            /** String */
            threadId: string;
            /** String */
            content: string;
            /** ArrayList<String> */
            mentions: string[];
        };
        /** AgentGraphRequest */
        AgentGraphRequest: {
            /**
             * ArrayList<GraphAgentRequest>
             * @description Every agent required for this agent graph
             */
            agents: components["schemas"]["GraphAgentRequest"][];
            /**
             * LinkedHashSet<LinkedHashSet<String>>
             * @description A set, containing sets that define the agent groups by name
             */
            groups: string[][];
            /**
             * LinkedHashMap<String,CustomTool>
             * @description A map of custom tools to provide to the agents in this graph
             */
            customTools: {
                [key: string]: components["schemas"]["CustomTool"];
            };
        };
        /**
         * GraphAgentRequest
         * @description A request for an agent.  GraphAgentRequest -> GraphAgent
         */
        GraphAgentRequest: {
            /** @description The ID of this agent in the registry */
            id: components["schemas"]["AgentRegistryIdentifier"];
            /**
             * String
             * @description A given name for this agent in the session/group
             */
            name: string;
            /**
             * String
             * @description An optional override for the description of this agent
             */
            description?: string;
            /**
             * LinkedHashMap<String,AgentOptionValue>
             * @description The arguments to pass to the agent
             */
            options: {
                [key: string]: {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "number";
                    /**
                     * Double
                     * Format: double
                     */
                    value: number;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "string";
                    /** String */
                    value: string;
                };
            };
            /**
             * String
             * @description The system prompt/developer text/preamble passed to the agent
             */
            systemPrompt?: string;
            /**
             * Boolean
             * @description All blocking agents in a group must be instantiated before the group can communicate.  Non-blocking agents' contributions to groups are optional
             */
            blocking?: boolean;
            /**
             * LinkedHashSet<String>
             * @description A list of custom tools that this agent can access.  The custom tools must be defined in the parent AgentGraphRequest object
             */
            customToolAccess: string[];
            /**
             * LinkedHashSet<GraphAgentPlugin>
             * @description Optional Coral features that this agent should have access to
             */
            coralPlugins: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "close_session_tool";
            }[];
            /**
             * GraphAgentProvider
             * @description The server that should provide this agent and the runtime to use
             */
            provider: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "local";
                runtime: components["schemas"]["RuntimeId"];
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "remote";
                /** @description The server that is providing this remote agent */
                server: components["schemas"]["GraphAgentServer"];
                /** @description The runtime to be used on the remote server.  Likely Docker or Phala */
                runtime: components["schemas"]["RuntimeId"];
                /**
                 * String
                 * @description The wallet address of the server that is providing this remote agent
                 */
                wallet: string;
                /**
                 * AgentClaimAmount
                 * @description The max cost of this agent
                 */
                maxCost: {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "coral";
                    /**
                     * Double
                     * Format: double
                     */
                    amount: number;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "micro_coral";
                    /**
                     * Long
                     * Format: int64
                     */
                    amount: number;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "usd";
                    /**
                     * Double
                     * Format: double
                     */
                    amount: number;
                };
                /**
                 * String
                 * @description The payment session ID for this remote agent.  This will be shared with all other remote agents in the graph
                 */
                paymentSessionId: string;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "remote_request";
                /** @description The runtime that should be used for this remote agent.  Servers can export only specific runtimes so the runtime choice may narrow servers that can adequately provide the agent */
                runtime: components["schemas"]["RuntimeId"];
                /**
                 * AgentClaimAmount
                 * @description The maximum we are willing to pay for this remote agent, note that if this is not high enough there may be no remotes willing to provide the agent
                 */
                maxCost: {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "coral";
                    /**
                     * Double
                     * Format: double
                     */
                    amount: number;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "micro_coral";
                    /**
                     * Long
                     * Format: int64
                     */
                    amount: number;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "usd";
                    /**
                     * Double
                     * Format: double
                     */
                    amount: number;
                };
                /**
                 * GraphAgentServerSource
                 * @description A description of which servers should be queried for this remote agent request
                 */
                serverSource: {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "org.coralprotocol.coralserver.agent.graph.server.GraphAgentServerSource.Indexer";
                    /** String */
                    indexer: string;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "servers";
                    /** ArrayList<GraphAgentServer> */
                    servers: components["schemas"]["GraphAgentServer"][];
                };
                /**
                 * GraphAgentServerScoring
                 * @description Customisation for the scoring of servers
                 */
                serverScoring?: {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "custom";
                    /** ArrayList<GraphAgentServerCustomScorer> */
                    scorers: ({
                        /**
                         * String
                         * @enum {string}
                         */
                        op: "is_false";
                        type: components["schemas"]["GraphAgentServerAttributeType"];
                        /** @description A flat negative or positive weight */
                        effect: components["schemas"]["flat"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        op: "is_not_present";
                        type: components["schemas"]["GraphAgentServerAttributeType"];
                        /** @description A flat negative or positive weight */
                        effect: components["schemas"]["flat"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        op: "is_present";
                        type: components["schemas"]["GraphAgentServerAttributeType"];
                        effect: components["schemas"]["GraphAgentServerScorerEffect"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        op: "is_true";
                        type: components["schemas"]["GraphAgentServerAttributeType"];
                        /** @description A flat negative or positive weight */
                        effect: components["schemas"]["flat"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        op: "string_equal";
                        type: components["schemas"]["GraphAgentServerAttributeType"];
                        /** String */
                        string: string;
                        /** @description A flat negative or positive weight */
                        effect: components["schemas"]["flat"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        op: "string_not_equal";
                        type: components["schemas"]["GraphAgentServerAttributeType"];
                        /** String */
                        string: string;
                        /** @description A flat negative or positive weight */
                        effect: components["schemas"]["flat"];
                    })[];
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "default";
                };
            };
        };
        /** AgentRegistryIdentifier */
        AgentRegistryIdentifier: {
            /**
             * String
             * @description The exact name of the agent in the registry
             */
            name: string;
            /**
             * String
             * @description The exact version of the agent in the registry
             */
            version: string;
        };
        /**
         * RuntimeId
         * @enum {string}
         */
        RuntimeId: "executable" | "docker" | "function";
        /** GraphAgentServer */
        GraphAgentServer: {
            /** String */
            address: string;
            /** UShort */
            port: number;
            /** Boolean */
            secure: boolean;
            /** ArrayList<GraphAgentServerAttribute> */
            attributes: ({
                /**
                 * String
                 * @enum {string}
                 */
                format: "boolean";
                type: components["schemas"]["GraphAgentServerAttributeType"];
                /** Boolean */
                value: boolean;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                format: "number";
                type: components["schemas"]["GraphAgentServerAttributeType"];
                /**
                 * Double
                 * Format: double
                 */
                value: number;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                format: "string";
                type: components["schemas"]["GraphAgentServerAttributeType"];
                /** String */
                value: string;
            })[];
        };
        /**
         * GraphAgentServerAttributeType
         * @enum {string}
         */
        GraphAgentServerAttributeType: "geographic_location" | "attested_by";
        /**
         * flat
         * @description A flat negative or positive weight
         */
        flat: {
            /**
             * Double
             * Format: double
             */
            weight: number;
        };
        /** GraphAgentServerScorerEffect */
        GraphAgentServerScorerEffect: {
            /**
             * Double
             * Format: double
             */
            weight: number;
        } | {
            /**
             * Double
             * Format: double
             */
            weight: number;
        };
        /** SessionRequest */
        SessionRequest: {
            /**
             * String
             * @description A unique identifier for the application that requested this session
             */
            applicationId: string;
            /**
             * String
             * @description Optionally set the session's ID.  If not set, a random UUID will be used
             */
            sessionId?: string;
            /**
             * String
             * @description For future use
             */
            privacyKey: string;
            /** @description A request for a graph of agents */
            agentGraphRequest: components["schemas"]["AgentGraphRequest"];
        };
        /** SessionIdentifier */
        SessionIdentifier: {
            /**
             * String
             * @description The unique identifier for the session
             */
            sessionId: string;
            /**
             * String
             * @description The unique identifier for the application
             */
            applicationId: string;
            /**
             * String
             * @description For future use
             */
            privacyKey: string;
        };
        /** Document */
        Document: {
            /** String */
            id: string;
            /** String */
            text: string;
        };
        /** ToolFunction */
        ToolFunction: {
            /** String */
            name: string;
            /** String */
            arguments: string;
        };
        /**
         * ContentFormat
         * @enum {string}
         */
        ContentFormat: "base64" | "string";
        /**
         * AudioMediaType
         * @enum {string}
         */
        AudioMediaType: "wav" | "mp3" | "aiff" | "aac" | "ogg" | "flac";
        /**
         * DocumentMediaType
         * @enum {string}
         */
        DocumentMediaType: "pdf" | "txt" | "rtf" | "html" | "css" | "markdown" | "csv" | "xml" | "javascript" | "python";
        /**
         * ImageMediaType
         * @enum {string}
         */
        ImageMediaType: "jpeg" | "png" | "gif" | "webp" | "heic" | "heif" | "svg";
        /**
         * ImageDetail
         * @enum {string}
         */
        ImageDetail: "low" | "high" | "auto";
        /**
         * VideoMediaType
         * @enum {string}
         */
        VideoMediaType: "avi" | "mp4" | "mpeg";
        /** AudioAssistant */
        AudioAssistant: {
            /** String */
            id: string;
        };
        /** ToolCall */
        ToolCall: {
            /** String */
            id: string;
            type: components["schemas"]["ToolType"];
            function: components["schemas"]["Function"];
        };
        /**
         * ToolType
         * @enum {string}
         */
        ToolType: "function";
        /** Function */
        Function: {
            /** String */
            name: string;
            /** String */
            arguments: string;
        };
        /** OpenAISystemContent */
        OpenAISystemContent: {
            type: components["schemas"]["SystemContentType"];
            /** String */
            text: string;
        };
        /**
         * SystemContentType
         * @enum {string}
         */
        SystemContentType: "text";
        /** OpenAIToolResultContent */
        OpenAIToolResultContent: {
            type: components["schemas"]["ToolResultContentType"];
            /** String */
            text: string;
        };
        /**
         * ToolResultContentType
         * @enum {string}
         */
        ToolResultContentType: "text";
        /** InputAudio */
        InputAudio: {
            /** String */
            data: string;
            format: components["schemas"]["AudioMediaType"];
        };
        /** ImageUrl */
        ImageUrl: {
            /** String */
            url: string;
            detail: components["schemas"]["ImageDetail"];
        };
        /** Telemetry */
        Telemetry: {
            /** String */
            modelDescription: string;
            /** String */
            preamble?: string;
            /** ArrayList<Document> */
            resources: components["schemas"]["Document"][];
            /** ArrayList<Document> */
            tools: components["schemas"]["Document"][];
            /**
             * Double
             * Format: double
             */
            temperature?: number;
            /**
             * Long
             * Format: int64
             */
            maxTokens?: number;
            /** JsonObject<String,JsonElement> */
            additionalParams?: {
                [key: string]: components["schemas"]["JsonElement"];
            };
            /** TelemetryMessages */
            messages: {
                /**
                 * String
                 * @enum {string}
                 */
                format: "Generic";
                /** ArrayList<GenericMessage> */
                data: ({
                    /**
                     * String
                     * @enum {string}
                     */
                    role: "assistant";
                    /** String */
                    id?: string;
                    /** ArrayList<GenericAssistantContent> */
                    content: ({
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "assistant_reasoning";
                        /** ArrayList<String> */
                        reasoning: string[];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "assistant_text";
                        /** String */
                        text: string;
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "assistant_tool_call";
                        /** String */
                        id: string;
                        /** String */
                        callId?: string;
                        function: components["schemas"]["ToolFunction"];
                    })[];
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    role: "user";
                    /** ArrayList<GenericUserContent> */
                    content: ({
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "audio";
                        /** String */
                        data: string;
                        format?: components["schemas"]["ContentFormat"];
                        mediaType?: components["schemas"]["AudioMediaType"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "document";
                        /** String */
                        data: string;
                        format?: components["schemas"]["ContentFormat"];
                        mediaType?: components["schemas"]["DocumentMediaType"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "image";
                        /** String */
                        data: string;
                        format?: components["schemas"]["ContentFormat"];
                        mediaType?: components["schemas"]["ImageMediaType"];
                        detail?: components["schemas"]["ImageDetail"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "text";
                        /** String */
                        text: string;
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "tool_result";
                        /** String */
                        id: string;
                        /** String */
                        callId?: string;
                        /** ArrayList<GenericToolResultContent> */
                        content: ({
                            /**
                             * String
                             * @enum {string}
                             */
                            type: "tool_image";
                            /** String */
                            data: string;
                            format?: components["schemas"]["ContentFormat"];
                            mediaType?: components["schemas"]["ImageMediaType"];
                            detail?: components["schemas"]["ImageDetail"];
                        } | {
                            /**
                             * String
                             * @enum {string}
                             */
                            type: "tool_text";
                            /** String */
                            text: string;
                        })[];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "video";
                        /** String */
                        data: string;
                        format?: components["schemas"]["ContentFormat"];
                        mediaType?: components["schemas"]["VideoMediaType"];
                    })[];
                })[];
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                format: "OpenAI";
                /** ArrayList<OpenAIMessage> */
                data: ({
                    /**
                     * String
                     * @enum {string}
                     */
                    role: "assistant";
                    /** ArrayList<OpenAIAssistantContent> */
                    content: ({
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "refusal";
                        /** String */
                        refusal: string;
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "text";
                        /** String */
                        text: string;
                    })[];
                    /** String */
                    refusal?: string;
                    audio?: components["schemas"]["AudioAssistant"];
                    /** String */
                    name?: string;
                    /** ArrayList<ToolCall> */
                    toolCalls: components["schemas"]["ToolCall"][];
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    role: "developer";
                    /** ArrayList<OpenAISystemContent> */
                    content: components["schemas"]["OpenAISystemContent"][];
                    /** String */
                    name?: string;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    role: "tool";
                    /** String */
                    toolCallId: string;
                    /** ArrayList<OpenAIToolResultContent> */
                    content: components["schemas"]["OpenAIToolResultContent"][];
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    role: "user";
                    /** ArrayList<OpenAIUserContent> */
                    content: ({
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "audio";
                        inputAudio: components["schemas"]["InputAudio"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "image_url";
                        imageUrl: components["schemas"]["ImageUrl"];
                    } | {
                        /**
                         * String
                         * @enum {string}
                         */
                        type: "text";
                        /** String */
                        text: string;
                    })[];
                    /** String */
                    name?: string;
                })[];
            };
        };
        /** TelemetryTarget */
        TelemetryTarget: {
            /** String */
            threadId: string;
            /** String */
            messageId: string;
        };
        /** TelemetryPost */
        TelemetryPost: {
            /** ArrayList<TelemetryTarget> */
            targets: components["schemas"]["TelemetryTarget"][];
            data: components["schemas"]["Telemetry"];
        };
        /** PublicRegistryAgent */
        PublicRegistryAgent: {
            id: components["schemas"]["AgentRegistryIdentifier"];
            /** ArrayList<RuntimeId> */
            runtimes: components["schemas"]["RuntimeId"][];
            /** LinkedHashMap<String,AgentOption> */
            options: {
                [key: string]: {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "number";
                    /** String */
                    description?: string;
                    /**
                     * Double
                     * Format: double
                     */
                    default?: number;
                    /** Boolean */
                    required: boolean;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "secret";
                    /** String */
                    description?: string;
                    /** Boolean */
                    required: boolean;
                } | {
                    /**
                     * String
                     * @enum {string}
                     */
                    type: "string";
                    /** String */
                    description?: string;
                    /** String */
                    default?: string;
                    /** Boolean */
                    required: boolean;
                };
            };
            /** LinkedHashMap<RuntimeId,PublicAgentExportSettings> */
            exportSettings: {
                [key: string]: components["schemas"]["PublicAgentExportSettings"];
            };
        };
        /** PublicAgentExportSettings */
        PublicAgentExportSettings: {
            /** UInt */
            quantity: number;
            pricing: components["schemas"]["RegistryAgentExportPricing"];
        };
        /** RegistryAgentExportPricing */
        RegistryAgentExportPricing: {
            /** AgentClaimAmount */
            min_price: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "coral";
                /**
                 * Double
                 * Format: double
                 */
                amount: number;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "micro_coral";
                /**
                 * Long
                 * Format: int64
                 */
                amount: number;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "usd";
                /**
                 * Double
                 * Format: double
                 */
                amount: number;
            };
            /** AgentClaimAmount */
            max_price: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "coral";
                /**
                 * Double
                 * Format: double
                 */
                amount: number;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "micro_coral";
                /**
                 * Long
                 * Format: int64
                 */
                amount: number;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "usd";
                /**
                 * Double
                 * Format: double
                 */
                amount: number;
            };
        };
        /**
         * PaidGraphAgentRequest
         * @description A paid request for an agent.  GraphAgentRequest -> GraphAgent
         */
        PaidGraphAgentRequest: {
            /** @description A request for an agent.  GraphAgentRequest -> GraphAgent */
            graphAgentRequest: components["schemas"]["GraphAgentRequest"];
            /**
             * Long
             * Format: int64
             */
            paidSessionId: number;
        };
        /** AgentPaymentClaimRequest */
        AgentPaymentClaimRequest: {
            /**
             * AgentClaimAmount
             * @description The amount to claim.  This will be converted to Coral when received
             */
            amount: {
                /**
                 * String
                 * @enum {string}
                 */
                type: "coral";
                /**
                 * Double
                 * Format: double
                 */
                amount: number;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "micro_coral";
                /**
                 * Long
                 * Format: int64
                 */
                amount: number;
            } | {
                /**
                 * String
                 * @enum {string}
                 */
                type: "usd";
                /**
                 * Double
                 * Format: double
                 */
                amount: number;
            };
        };
        /**
         * AgentRemainingBudget
         * @description
         *         This object is returned by the agent claim endpoint and represents the remaining budget for the agent.  The agent
         *         should use this respond to decide whether whether it can continue providing services with the remaining budget.
         *
         *         This object attaches a USD price for a Coral to it so that agents do not have to make multiple calls to the pricing
         *         endpoint to determine the price of a Coral.  This field is an 'estimate', it can be based off cached data and may not
         *         be accurate, so this should only be used if the agent represented it's rates in USD.
         *
         *         If better accuracy is required agent-side, the budget should only use micro-corals.
         *
         */
        AgentRemainingBudget: {
            /**
             * Long
             * Format: int64
             * @description The remaining budget for the agent, represented in micro-corals
             */
            remainingBudget: number;
            /**
             * Double
             * Format: double
             * @description Current USD price for one whole Coral
             */
            coralUsdPrice: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    debugCreateThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The application ID */
                applicationId: string;
                /** @description The privacy key */
                privacyKey: string;
                /** @description The Coral session ID */
                coralSessionId: string;
                /** @description The debug agent ID */
                debugAgentId: string;
            };
            cookie?: never;
        };
        /** @description Thread creation request */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateThreadInput"];
            };
        };
        responses: {
            /** @description Thread created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description Error creating thread */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    debugSendMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The application ID */
                applicationId: string;
                /** @description The privacy key */
                privacyKey: string;
                /** @description The Coral session ID */
                coralSessionId: string;
                /** @description The debug agent ID */
                debugAgentId: string;
            };
            cookie?: never;
        };
        /** @description The message to send */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendMessageInput"];
            };
        };
        responses: {
            /** @description Message sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description Error sending message */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    getSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Session creation request */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SessionRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionIdentifier"];
                };
            };
            /** @description The agent graph is invalid and could not be processed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description Invalid application ID or privacy key */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    sendMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The application ID */
                applicationId: string;
                /** @description The privacy key */
                privacyKey: string;
                /** @description The Coral session ID */
                coralSessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid session ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description Invalid application ID or privacy key */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description Invalid Coral session ID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description MCP error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    sendDevMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The application ID */
                applicationId: string;
                /** @description The privacy key */
                privacyKey: string;
                /** @description The Coral session ID */
                coralSessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid session ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description Invalid Coral session ID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description MCP error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    getTelemetry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The session ID */
                sessionId: string;
                /** @description The thread ID */
                threadId: string;
                /** @description The message ID */
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Telemetry"];
                };
            };
            /** @description Telemetry data not found for specified message */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    addTelemetry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The session ID */
                sessionId: string;
            };
            cookie?: never;
        };
        /** @description Telemetry data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TelemetryPost"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Specified messages were not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    getAvailableAgents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicRegistryAgent"][];
                };
            };
        };
    };
    claimAgents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description A list of agents to claim */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaidGraphAgentRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description GraphAgentRequest is invalid in a remote context */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    getExportedAgent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the exported agent */
                name: string;
                /** @description The version of the exported agent */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["PublicAgentExportSettings"];
                    };
                };
            };
            /** @description Agent was not found or is not exported */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    claimPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The remote session ID */
                remoteSessionId: string;
            };
            cookie?: never;
        };
        /** @description A description of the work done and the payment required */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AgentPaymentClaimRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRemainingBudget"];
                };
            };
            /** @description No payment associated with the session */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
            /** @description Remote session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
    getPublicWallet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description No wallet configured on this server */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteException"];
                };
            };
        };
    };
}
